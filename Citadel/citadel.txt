DISK SPACE ANALYSIS:

space = [8,4,2,5,3]
x = 1
s = 0
e = x
arr = []
while(e!=len(space)+1):
  print(s,e,min(space[s:e]))
  arr.append(min(space[s:e]))
  s += 1
  e += 1
print(max(arr))
-------------------------------------------------
from queue import deque
def getMin( space, x ):
    q = deque([])
    n = len(space)
    result = []
    
    for i in range(n):
        val = space[i]
        while len(q) > 0 and i >= q[0][0]:
            q.popleft()
        
        while len(q) > 0 and q[len(q)-1][1] >= val:
            q.pop()
            
        q.append( (i+x, val) )
        result.append(q[0][1])
    return max(result[x-1:])
getMin(space, x)
return max(result[[x-1:])


##################################################################################


#bday card collection
from collections import Counter
A = [4,6,12,8]
n= len(A)
d = 14
m = max(A)
m = max(m,d+1)
dic = Counter(A)
for i in range(1,m):
  if(i not in dic and i<=d):
    print(i)
    d -= i
    
    
    
    
##################################################################################
# Inversions

arr = [5,4,3,2,1]
arr = set(arr)
n = len(arr)
arr = sorted(arr, reverse=True)

def backtrack(temp, start, end):
  if(len(temp)==3):
    ans.append(temp[:])
  else:
    for i in range(start, end):
      if(visited[i] or start>i):
        continue
      temp.append(arr[i])
      visited[i] = True
      backtrack(temp, i+1, end)
      temp.pop()
      visited[i] = False


ans = []
visited = [False]*n
backtrack([], 0, n)
print(ans)

#################################################################################
